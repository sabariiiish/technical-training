class Node:
    def __init__(self, d):
        self.data = d
        self.add = None
class LinkedList:
    def __init__(self):
        self.head = None
    def append(self, data):
        newnode = Node(data)
        if not self.head:
            self.head = newnode
        else:
            temp = self.head
            while temp.add:
                temp = temp.add
            temp.add = newnode
    def display(self):
        temp = self.head
        while temp:
            print(temp.data, end="\t")
            temp = temp.add
        print()
    def reverseKgroup(self, k):
        def reverse_segment(start, end):
            prev, curr = end, start
            while curr != end:
                nxt = curr.add
                curr.add = prev
                prev = curr
                curr = nxt
            return prev  
        dummy = Node(0)
        dummy.add = self.head
        group_prev = dummy
        while True:         
            kth = group_prev
            for _ in range(k):
                kth = kth.add
                if not kth
                    self.head = dummy.add
                    return
            group_next = kth.add
            new_head = reverse_segment(group_prev.add, group_next)
            tmp = group_prev.add          
            group_prev.add = new_head
            group_prev = tmp             
linked = LinkedList()
for val in [10, 20, 30, 10, 10, 20, 30, 20, 30, 10, 20, 30]:
    linked.append(val)
print("Original list:")
linked.display()
linked.reverseKgroup(3)   # reverse in groups of 3
print("List after reversing every 3 nodes:")
linked.display()
